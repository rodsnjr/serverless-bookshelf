service: bookshelf

plugins:
  - serverless-offline-sns
  - serverless-s3-local
  - serverless-dynamodb-local
  - serverless-offline

custom:
  dynamodb:
    stages:
      - dev
    start:
      migrate: true
      port: ${self:provider.environment.DYNAMO_PORT}
      inMemory: true
      seed: true
    seed:
      domain:
        sources:
          - table: ${self:provider.environment.BOOKS_TABLE}
            sources: [./books-seed.json]
  serverless-offline-sns:
    port: ${self:provider.environment.SNS_PORT}
  s3:
    host: 0.0.0.0
    port: ${self:provider.environment.S3_PORT}
    directory: /tmp

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: us-east-1

  iamRoleStatements:
  - Effect: Allow
    Action:
      - dynamodb:Query
      - dynamodb:Scan
      - dynamodb:GetItem
      - dynamodb:PutItem
      - dynamodb:UpdateItem
      - dynamodb:DeleteItem
    Resource:
        - { "Fn::GetAtt": ["BooksDynamoDBTable", "Arn" ] }
        - { "Fn::GetAtt": ["StockDynamoDBTable", "Arn" ] }
  - Effect: Allow
    Action:
      - sns:*

  environment:
    BOOKS_TABLE: bs-books
    STOCK_TABLE: bs-stock
    STOCK_ENTRY_TOPIC: bs-stock-entry
    DYNAMO_PORT: 4344
    SNS_PORT: 4002
    S3_PORT: 4333
    S3_BUCKET: local-bucket

functions:
  app:
    handler: books.handler
    events:
        - http: ANY /
        - http: 'ANY {proxy+}'
  stockEntry:
    handler: stock.stockEntry
    events:
      - sns:
          topicName: ${self:provider.environment.STOCK_ENTRY_TOPIC}
  getStock:
    handler: stock.getStock
    events:
      - http:
          method: get
          path: stock/{bookId}
          request:
            parameters:
              paths:
                id: true
resources:
  Resources:
    BooksDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.BOOKS_TABLE}
    
    StockDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.STOCK_TABLE}

    S3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.S3_BUCKET}